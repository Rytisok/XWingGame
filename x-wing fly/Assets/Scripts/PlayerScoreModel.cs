using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerScoreModel
{
    [RealtimeProperty(11, true, true)]
    private int _kills;
    [RealtimeProperty(12, true, true)]
    private int _deaths;
    [RealtimeProperty(13, true, true)]
    private int _test;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerScoreModel : IModel {
    // Properties
    public int kills {
        get { return _cache.LookForValueInCache(_kills, entry => entry.killsSet, entry => entry.kills); }
        set { if (value == kills) return; _cache.UpdateLocalCache(entry => { entry.killsSet = true; entry.kills = value; return entry; }); FireKillsDidChange(value); }
    }
    public int deaths {
        get { return _cache.LookForValueInCache(_deaths, entry => entry.deathsSet, entry => entry.deaths); }
        set { if (value == deaths) return; _cache.UpdateLocalCache(entry => { entry.deathsSet = true; entry.deaths = value; return entry; }); FireDeathsDidChange(value); }
    }
    
    // Events
    public delegate void KillsDidChange(PlayerScoreModel model, int value);
    public event         KillsDidChange killsDidChange;
    public delegate void DeathsDidChange(PlayerScoreModel model, int value);
    public event         DeathsDidChange deathsDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool killsSet;
        public int  kills;
        public bool deathsSet;
        public int  deaths;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public PlayerScoreModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireKillsDidChange(int value) {
        try {
            if (killsDidChange != null)
                killsDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireDeathsDidChange(int value) {
        try {
            if (deathsDidChange != null)
                deathsDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        Kills = 11,
        Deaths = 12,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _kills = kills;
            _deaths = deaths;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Kills, (uint)_kills);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Deaths, (uint)_deaths);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.killsSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Kills, (uint)entry.kills);
                if (entry.deathsSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.Deaths, (uint)entry.deaths);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.Kills, (uint)_kills);
            stream.WriteVarint32((uint)PropertyID.Deaths, (uint)_deaths);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.killsSet || entry.deathsSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.killsSet)
                    stream.WriteVarint32((uint)PropertyID.Kills, (uint)entry.kills);
                if (entry.deathsSet)
                    stream.WriteVarint32((uint)PropertyID.Deaths, (uint)entry.deaths);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool killsExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.killsSet);
        bool deathsExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.deathsSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Kills: {
                    int previousValue = _kills;
                    
                    _kills = (int)stream.ReadVarint32();
                    
                    if (!killsExistsInChangeCache && _kills != previousValue)
                        FireKillsDidChange(_kills);
                    break;
                }
                case (uint)PropertyID.Deaths: {
                    int previousValue = _deaths;
                    
                    _deaths = (int)stream.ReadVarint32();
                    
                    if (!deathsExistsInChangeCache && _deaths != previousValue)
                        FireDeathsDidChange(_deaths);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
